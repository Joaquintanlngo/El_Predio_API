// <auto-generated />
using System;
using Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Techada",
                            Description = "Cancha techada con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "5A",
                            Price = 40000f
                        },
                        new
                        {
                            Id = 2,
                            Category = "Techada",
                            Description = "Cancha techada con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "5B",
                            Price = 45000f
                        },
                        new
                        {
                            Id = 3,
                            Category = "Techada",
                            Description = "Cancha techada con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "6A",
                            Price = 60000f
                        },
                        new
                        {
                            Id = 4,
                            Category = "Techada",
                            Description = "Cancha techada con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "6C",
                            Price = 60000f
                        },
                        new
                        {
                            Id = 5,
                            Category = "Techada",
                            Description = "Cancha techada con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "7T",
                            Price = 70000f
                        },
                        new
                        {
                            Id = 6,
                            Category = "Aire Libre",
                            Description = "Cancha al aire libre con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "7AL",
                            Price = 70000f
                        },
                        new
                        {
                            Id = 7,
                            Category = "Aire Libre",
                            Description = "Cancha al aire libre con cesped cintetico y caucho",
                            Duration = "60 min",
                            IsAvailable = false,
                            Name = "8AL",
                            Price = 83000f
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourtId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourtId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CourtId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "joako.tanlon@gmail.com",
                            FullName = "Joaquin Tanlongo",
                            Password = "$2a$11$Pinc2b4Cp/AMVsLQsXZviOl6Gtn3tFwPOa01V8rYNtcTuA30gTLkO",
                            PhoneNumber = "3412122907",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "marmax0504@gmail.com",
                            FullName = "Maximo Martin",
                            Password = "$2a$11$nmYl1GetcLyCZu1q6Q6yzeniwlWdQgEdTtwl2QqJXSgMl1xqy5tEm",
                            PhoneNumber = "3412122908",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "marucomass@gmail.com",
                            FullName = "Mario Massonnat",
                            Password = "$2a$11$7QEmyyqJel/NSklxQ615JOLBlatw1/WzoE/Sy1uBSH27Zd72qiYCG",
                            PhoneNumber = "3412122909",
                            Role = 1
                        },
                        new
                        {
                            Id = 5,
                            Email = "frandepe7@gmail.com",
                            FullName = "Francisco Depetrini",
                            Password = "$2a$11$A.arBjyt5PhYHPMcWDlZ9eLACVdlh7RLXO8a2hJL9F1MgkEd5zx3e",
                            PhoneNumber = "3412122910",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.SysAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "elpredio@gmail.com",
                            FullName = "El Predio",
                            Password = "$2a$11$tNgtGW7xiqCkEwcZChWMGuVUnKT.0HGRH/8zvdFe8SodfUUA9FWR6",
                            PhoneNumber = "3412121111",
                            Role = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Court", "Court")
                        .WithMany("Reservations")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("Domain.Entities.Court", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
